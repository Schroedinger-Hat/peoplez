// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Core Elements
model Configurable {
  id        String           @id @default(cuid())
  name      String           @unique
  type      ConfigurableType
  value     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([name])
}

enum ConfigurableType {
  STRING
  TEXT
  BOOLEAN
  NUMBER
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  role             UserRole     @default(member)
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?      @unique
  accounts         Account[]
  sessions         Session[]
  memberships      Membership[]
}

enum UserRole {
  member
  admin
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
  UNSUBSCRIBED
  EXPIRED
}

model Membership {
  id                   String           @id @default(cuid())
  socialSecurityNumber String
  internalRef          String?          @unique // @db.Text
  status               MembershipStatus @default(PENDING)
  lastPaymentAt        DateTime?
  expiresAt            DateTime?
  stripeSubscriptionId String?          @unique // @db.Text

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Associations IDs
  userId               String
  membershipTemplateId String

  // Associations
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipTemplate MembershipTemplate @relation(fields: [membershipTemplateId], references: [id], onDelete: Cascade)
}

model MembershipTemplate {
  id            String      @id @default(cuid())
  title         String
  description   String?
  features      String[]
  priceAmount   Int
  pricePeriod   PricePeriod @default(Yearly)
  priceUnit     PriceUnit   @default(EUR)
  stripePriceId String      @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Associations
  membership Membership[]
}

enum PricePeriod {
  Yearly
  Monthly
}

enum PriceUnit {
  EUR
  USD
}
